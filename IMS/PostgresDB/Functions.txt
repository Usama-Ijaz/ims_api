CREATE OR REPLACE FUNCTION fn_get_user(i_email VARCHAR)
RETURNS TABLE(userid INT, passwordHash VARCHAR, passwordsalt VARCHAR)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY 
    SELECT Users.userid, Users.passwordHash, Users.passwordsalt 
    FROM Users 
    WHERE Email = i_email;
END;
$$;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fn_insert_user(
    i_email VARCHAR,
    i_password VARCHAR,
    i_passwordsalt VARCHAR
)
RETURNS INTEGER
LANGUAGE plpgsql
AS $$
DECLARE
    new_userid INT;
    existing_userid INT;
BEGIN
    SELECT Users.UserId INTO existing_userid FROM Users WHERE Email = i_email;

    IF existing_userid IS NOT NULL THEN
        RETURN -1;
    END IF;

    INSERT INTO Users (Email, PasswordHash, PasswordSalt, ProfileStatus)
    VALUES (i_email, i_password, i_passwordsalt, 'Email registered')
    RETURNING UserId INTO new_userid;
    
    RETURN new_userid;
END;
$$;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fn_insert_otp(
    i_userid INT,
    i_otp VARCHAR
)
RETURNS INTEGER
LANGUAGE plpgsql
AS $$
DECLARE
    new_otpid INT;
BEGIN

    INSERT INTO OtpGenerated (Otp, UserId)
    VALUES (i_otp, i_userid)
    RETURNING OtpId INTO new_otpid;
    
    RETURN new_otpid;
END;
$$;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fn_verify_otp(
    i_userid INT,
    i_otp VARCHAR
)
RETURNS INTEGER
LANGUAGE plpgsql
AS $$
DECLARE
    otpid_status INT;
	latest_ddate TIMESTAMP;
BEGIN

    SELECT DDate INTO latest_ddate
    FROM otpgenerated
    WHERE UserId = i_userid AND otp = i_otp
    ORDER BY DDate DESC
    LIMIT 1;
	
	IF latest_ddate IS NULL THEN
		RETURN -1;
    ELSEIF latest_ddate < (NOW() AT TIME ZONE 'utc' - INTERVAL '2 minutes') THEN
        RETURN -2;
    ELSE
        UPDATE Users
        SET ProfileStatus = 'OTP verified'
        WHERE UserId = i_userid;
        
        RETURN 1;
    END IF;
    
END;
$$;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fn_update_user_address(
    p_user_id INT,
    p_address1 VARCHAR,
    p_address2 VARCHAR,
    p_city VARCHAR,
    p_country VARCHAR
)
RETURNS BOOLEAN
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE Users
    SET Address1 = p_address1,
        Address2 = p_address2,
        City = p_city,
        Country = p_country,
        ProfileStatus = 'Address added'
    WHERE UserId = p_user_id;

    IF FOUND THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
END;
$$;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fn_update_user_image(
    p_user_id INT,
	p_image TEXT
)
RETURNS BOOLEAN
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE Users
    SET Image = p_image,
    ProfileStatus = 'Image added'
    WHERE UserId = p_user_id;

    IF FOUND THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
END;
$$;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fn_get_user_profile(i_userId INT)
RETURNS TABLE(Email VARCHAR, Address1 VARCHAR, Address2 VARCHAR, City VARCHAR, Country VARCHAR, image TEXT, ProfileStatus VARCHAR)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY 
    SELECT Users.email, Users.address1, Users.address2, Users.city, Users.country, Users.image, Users.profilestatus 
    FROM Users 
    WHERE Users.userid = i_userId;
END;
$$;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fn_get_user_profile_status(
    i_userid INT
)
RETURNS VARCHAR
LANGUAGE plpgsql
AS $$
DECLARE
    profile_status VARCHAR;
BEGIN
    SELECT Users.profilestatus INTO profile_status
    FROM Users
    WHERE UserId = i_userid;
	
	IF profile_status IS NULL THEN
		RETURN 'Unknown user';
    ELSE
        RETURN profile_status;
    END IF;
END;
$$;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fn_get_preferences()
RETURNS TABLE(PreferenceId INT, PreferenceName VARCHAR)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT Preferences.PreferenceId, Preferences.PreferenceName
    FROM Preferences;
END;
$$;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fn_get_user_preferences(p_user_id INT)
RETURNS TABLE(PreferenceId INT, PreferenceValue BOOL, PreferenceName VARCHAR)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT up.PreferenceId, up.PreferenceValue, p.PreferenceName
    FROM UserPreferences up
    JOIN Preferences p ON up.PreferenceId = p.PreferenceId
    WHERE up.UserId = p_user_id;
END;
$$;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fn_update_user_preference(
    p_user_id INT,
    p_preference_id INT,
    p_preference_value BOOL
)
RETURNS VOID
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO UserPreferences (UserId, PreferenceId, PreferenceValue, DDate)
    VALUES (p_user_id, p_preference_id, p_preference_value, NOW() AT TIME ZONE 'utc')
    ON CONFLICT (UserId, PreferenceId) DO UPDATE
    SET PreferenceValue = EXCLUDED.PreferenceValue,
        DDate = NOW() AT TIME ZONE 'utc';
		
	UPDATE Users
	SET ProfileStatus = 'Preferences added'
	WHERE UserId = p_user_id;
END;
$$;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
